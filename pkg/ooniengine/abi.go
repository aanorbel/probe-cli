// Code generated by go generate; DO NOT EDIT.

package main

//
// Auto-generated ABI
//

// ABI version number.
const ABIVersion = "202208042045"

const (
	// Name of the Log event
	LogEventName = "Log"

	// Name of the DataUsage event
	DataUsageEventName = "DataUsage"

	// Name of the GeoIP event
	GeoIPEventName = "GeoIP"

	// Debug log level.
	LogLevelDebug = "DEBUG"

	// Info log level.
	LogLevelInfo = "INFO"

	// Warning log level.
	LogLevelWarning = "WARNING"

	// Name of the MetaInfoExperiment event
	MetaInfoExperimentEventName = "MetaInfoExperiment"

	// Name of the Progress event
	ProgressEventName = "Progress"

	// The error string inside SubmitEvent when the user disabled submission.
	SubmissionDisabledError = "submission_disabled_error"

	// Name of the Submit event
	SubmitEventName = "Submit"
)

// A log message.
type LogEventValue struct {
	// Log level.
	Level string `json:"level"`

	// Log message.
	Message string `json:"message"`
}

// Information about the amount of data consumed by an experiment.
type DataUsageEventValue struct {
	// KiB sent by this experiment.
	KibiBytesSent float64 `json:"kibi_bytes_sent"`

	// KiB received by this experiment.
	KibiBytesReceived float64 `json:"kibi_bytes_received"`
}

// Probe geolocation information.
type GeoIPEventValue struct {
	// Failure that occurred or empty string (on success)
	Failure string `json:"failure"`

	// The probe's IP address.
	ProbeIP string `json:"probe_ip"`

	// ASN derived from the probe's IP.
	ProbeASN string `json:"probe_asn"`

	// Country code derived from the probe's IP.
	ProbeCC string `json:"probe_cc"`

	// Network name of the probe's ASN.
	ProbeNetworkName string `json:"probe_network_name"`

	// IPv4 address used by getaddrinfo.
	ResolverIP string `json:"resolver_ip"`

	// ASN derived from the resolver's IP.
	ResolverASN string `json:"resolver_asn"`

	// Network name of resolver's ASN.
	ResolverNetworkName string `json:"resolver_network_name"`
}

// Contains config for the GeoIP task.
type GeoIPConfig struct {
	// Config for creating a session.
	Session SessionConfig `json:"session"`
}

// Config for the meta-info-experiment task.
type MetaInfoExperimentConfig struct {
}

// Contains meta-info about an experiment
type MetaInfoExperimentEventValue struct {
	// The experiment name
	Name string `json:"name"`

	// Whether this experiment could use input.
	//
	// If this field is false, it does not make sense to generate
	// command line options for passing input to the experiment.
	UsesInput bool `json:"uses_input"`
}

// Base class for all events.
type BaseEvent struct {
}

// Base class for all configs.
type BaseConfig struct {
}

// Config for running a nettest.
type NettestConfig struct {
	// OPTIONAL annotations for the nettest.
	Annotations map[string]string `json:"annotations"`

	// OPTIONAL extra options for the nettest.
	ExtraOptions map[string]any `json:"extra_options"`

	// OPTIONAL inputs for the nettest.
	Inputs []string `json:"inputs"`

	// An OPTIONAL list of files from which to read inputs for the nettest.
	InputFilePaths []string `json:"input_file_paths"`

	// The OPTIONAL nettest maximum runtime in seconds.
	//
	// This setting only applies to nettests that require input, such
	// as Web Connectivity.
	MaxRuntime int64 `json:"max_runtime"`

	// The MANDATORY name of the nettest to execute.
	Name string `json:"name"`

	// This setting allows to OPTIONALLY disable submitting measurements.
	//
	// The default is that we submit every measurement we perform.
	NoCollector bool `json:"no_collector"`

	// This setting allows to OPTIONALLY disable saving measurements to disk.
	//
	// The default is to save using the file name indicated by ReportFile.
	NoJSON bool `json:"no_json"`

	// OPTIONALLY tells the engine to randomly shuffle the input list.
	Random bool `json:"random"`

	// The OPTIONAL name of the file where to save measurements.
	//
	// If this field is empty, we will use 'report.jsonl' as the file name.
	ReportFile string `json:"report_file"`

	// Config for creating a session.
	Session SessionConfig `json:"session"`
}

// OONI Run v2 nettest descriptor.
type OONIRunV2Nettest struct {
	// OPTIONAL annotations for the nettest.
	Annotations map[string]string `json:"annotations"`

	// OPTIONAL inputs for the nettest.
	Inputs []string `json:"inputs"`

	// OPTIONAL extra options for the nettest.
	Options map[string]any `json:"options"`

	// The MANDATORY name of the nettest to execute.
	TestName string `json:"test_name"`
}

// OONI Run v2 descriptor.
type OONIRunV2Descriptor struct {
	// Name of this OONI Run v2 descriptor.
	Name string `json:"name"`

	// Description for this OONI Run v2 descriptor.
	Description string `json:"description"`

	// Author of this OONI Run v2 descriptor.
	Author string `json:"author"`

	Nettests []OONIRunV2Nettest `json:"nettests"`
}

// Configures the OONI Run v2 task measuring an already available descriptor.
type OONIRunV2MeasureDescriptorConfig struct {
	// The OPTIONAL nettest maximum runtime in seconds.
	//
	// This setting only applies to nettests that require input, such
	// as Web Connectivity.
	MaxRuntime int64 `json:"max_runtime"`

	// This setting allows to OPTIONALLY disable submitting measurements.
	//
	// The default is that we submit every measurement we perform.
	NoCollector bool `json:"no_collector"`

	// This setting allows to OPTIONALLY disable saving measurements to disk.
	//
	// The default is to save using the file name indicated by ReportFile.
	NoJSON bool `json:"no_json"`

	// OPTIONALLY tells the engine to randomly shuffle the input list.
	Random bool `json:"random"`

	// The OPTIONAL name of the file where to save measurements.
	//
	// If this field is empty, we will use 'report.jsonl' as the file name.
	ReportFile string `json:"report_file"`

	// Config for creating a session.
	Session SessionConfig `json:"session"`

	// Descriptor for OONI Run v2
	Descriptor OONIRunV2Descriptor `json:"descriptor"`
}

// Provides information about nettests' progress.
type ProgressEventValue struct {
	// Number between 0 and 1 indicating the current progress.
	Percentage float64 `json:"percentage"`

	// Message associated with the current progress indication.
	Message string `json:"message"`
}

// Config for creating a new session
type SessionConfig struct {
	// The verbosity level for the sessions's logger.
	//
	// It must be one of LogLevelDebug and LogLevelInfo or an empty string. In case
	// it's an empty string, the code will assume LogLevelInfo.
	LogLevel string `json:"log_level"`

	// The OPTIONAL probe-services URL.
	//
	// Leaving this field empty means we're going to use the default URL
	// for communicating with the OONI backend. You may want to change
	// this value for testing purposes or to use another backend.
	ProbeServicesURL string `json:"probe_services_url"`

	// The OPTIONAL proxy URL.
	//
	// Leaving this field empty means we're not using a proxy. You can
	// use the following proxies:
	//
	// 1. socks5://<host>:<port> to use a SOCKS5 proxy;
	//
	// 2. tor:/// to launch the tor executable and use its SOCKS5 port;
	//
	// 3. psiphon:/// to use the built-in Psiphon client as a proxy.
	//
	// On mobile devices, we will use a version of tor that we link as a library
	// as opposed to using the tor executable. On desktop, you must have
	// installed the tor executable somewhere in your PATH.
	ProxyURL string `json:"proxy_url"`

	// The MANDATORY name of the tool using this library.
	//
	// You MUST specify this field or the session won't be started.
	SoftwareName string `json:"software_name"`

	// The MANDATORY version of the tool using this library.
	//
	// You MUST specify this field or the session won't be started.
	SoftwareVersion string `json:"software_version"`

	// The MANDATORY directory where to store the engine state.
	//
	// You MUST specify this field or the session won't be started.
	//
	// You MUST create this directory in advance.
	StateDir string `json:"state_dir"`

	// The MANDATORY directory where to store temporary files.
	//
	// You MUST specify this field or the session won't be started.
	//
	// You MUST create this directory in advance.
	//
	// The session will create a temporary directory _inside_ this directory
	// and will remove the inner directory when it is finished running.
	TempDir string `json:"temp_dir"`

	// TorArgs contains OPTIONAL arguments to pass to tor.
	TorArgs []string `json:"tor_args"`

	// The OPTIONAL path to the tor binary.
	//
	// You can use this field to execute a version of tor that has
	// not been installed inside your PATH.
	TorBinary string `json:"tor_binary"`

	// The MANDATORY directory where to store persistent tunnel state.
	//
	// You MUST specify this field or the session won't be started.
	//
	// You MUST create this directory in advance.
	//
	// Both psiphon and tor will store information inside this directory when
	// they're used as a circumention mechanism, i.e., using ProxyURL.
	TunnelDir string `json:"tunnel_dir"`
}

// Contains the results of a measurement submission.
type SubmitEventValue struct {
	// Failure that occurred or empty string (on success)
	Failure string `json:"failure"`

	// Index of this measurement relative to the current experiment.
	Index int64 `json:"index"`

	// The measurement's input.
	Input string `json:"input"`

	// The measurement's report ID.
	ReportID string `json:"report_id"`

	// UTF-8 string containing serialized JSON measurement.
	Measurement string `json:"measurement"`
}
