package main

//
// Go code generator
//

import (
	"io"

	"github.com/iancoleman/strcase"
)

// golangType maps a given Type to an actual golang type.
func golangType(kind Type) string {
	switch kind {
	case TypeString:
		return "string"
	case TypeInt64:
		return "int64"
	case TypeListString:
		return "[]string"
	case TypeMapStringString:
		return "map[string]string"
	case TypeMapStringAny:
		return "map[string]any"
	case TypeBool:
		return "bool"
	case TypeFloat64:
		return "float64"
	case OONIRunV2NettestListType:
		return "[]OONIRunV2Nettest" // special case
	default:
		return string(kind)
	}
}

// generateABIGo generates the abi.go file.
func generateABIGo(fp io.Writer, abiVersion string, abi *ABI) {
	writeFile(fp, "// Code generated by go generate; DO NOT EDIT.\n")
	writeFile(fp, "\n")

	writeFile(fp, "package main\n")
	writeFile(fp, "\n")

	writeFile(fp, "//\n")
	writeFile(fp, "// Auto-generated ABI\n")
	writeFile(fp, "//\n")
	writeFile(fp, "\n")

	writeFile(fp, "// ABI version number.\n")
	writeFile(fp, "const ABIVersion = \"%s\"\n", abiVersion)
	writeFile(fp, "\n")

	writeFile(fp, "const (\n")
	for index, constant := range abi.Constants {
		for _, doc := range constant.Docs {
			writeFile(fp, "\t// %s\n", doc)
		}
		writeFile(fp, "\t%s = \"%s\"\n", constant.Name, constant.Value)
		if index != len(abi.Constants)-1 {
			writeFile(fp, "\n")
		}
	}
	writeFile(fp, ")\n")
	writeFile(fp, "\n")

	for _, structdef := range abi.Structs {
		for _, doc := range structdef.Docs {
			writeFile(fp, "// %s\n", doc)
		}
		writeFile(fp, "type %s struct {\n", structdef.Name)
		for index, field := range structdef.Fields {
			for _, doc := range field.Docs {
				writeFile(fp, "\t// %s\n", doc)
			}
			name := field.Name
			kind := golangType(field.Type)
			tag := strcase.ToSnake(field.Name)
			writeFile(fp, "\t%s %s `json:\"%s\"`\n", name, kind, tag)
			if index != len(structdef.Fields)-1 {
				writeFile(fp, "\n")
			}
		}
		writeFile(fp, "}\n")
		writeFile(fp, "\n")
	}
}

// generateRegistryGo generates the registry.go file.
func generateRegistryGo(fp io.Writer, abi *ABI) {
	writeFile(fp, "// Code generated by go generate; DO NOT EDIT.\n")
	writeFile(fp, "\n")

	writeFile(fp, "package main\n")
	writeFile(fp, "\n")

	writeFile(fp, "//\n")
	writeFile(fp, "// Auto-generated registry of available tasks.\n")
	writeFile(fp, "//\n")
	writeFile(fp, "\n")

	writeFile(fp, "// taskRegistry maps each task name to its implementation.\n")
	writeFile(fp, "var taskRegistry = map[string]taskRunner{\n")
	for _, task := range abi.Tasks {
		writeFile(fp, "\t\"%s\": new%sRunner(),\n", task.Name, task.Name)
	}
	writeFile(fp, "}\n")
	writeFile(fp, "\n")
}
