package {{ .Package }}

//
// TestKeys for {{ .Name }}.
//
// Note: for historical reasons, we call TestKeys the JSON object
// containing the results produced by OONI experiments.
//

import "sync"

// TestKeys contains the results produced by {{ .Name }}.
type TestKeys struct {
	// TODO: add here fields produced by this experiment. They should
	// be public such that we can JSON serialize them.
	//
	// Ideally, try to keep the field names alphabetically sorted.
	//
	// For example:
	//
	// // Blocked indicates that the resource is censored.
	// Blocked bool `json:"blocked"`

	// fundamentalFailure indicates that some fundamental error occurred
	// in a background task. A fundamental error is something like a programmer
	// such as a failure to parse a URL that was hardcoded in the codebase. When
	// this class of errors happens, you certainly don't want to submit the
	// resulting measurement to the OONI collector.
	fundamentalFailure error

	// mu provides mutual exclusion for accessing the test keys.
	mu *sync.Mutex
}

// TODO: implement more thread-safe setters for the real test keys. This allows
// tasks to write directly into the TestKeys.
//
// In some cases, you may also need to write thread-safe getters. For example,
// below we also define a getter for fundamentalFailure because we need to
// read its value inside the autogenerated Runner.Main func.

// SetFundamentalFailure implements TestKeys.
func (tk *TestKeys) SetFundamentalFailure(err error) {
	tk.mu.Lock()
	tk.fundamentalFailure = err
	tk.mu.Unlock()
}

// FundamentalFailure implements TestKeys.
func (tk *TestKeys) FundamentalFailure() error {
	tk.mu.Lock()
	err := tk.fundamentalFailure
	tk.mu.Unlock()
	return err
}

// NewTestKeys creates a new instance of TestKeys.
func NewTestKeys() *TestKeys {
	return &TestKeys{
		// TODO: here you should initialize all the fields
	}
}
