package {{ .Name }}

//
// The main task of the {{ .Name }} experiment.
//
// You autogenerated code for a multi-task experiment. This
// means that the "main" function of the experiment, i.e.,
// Measurer.Run will instantiate the MainTask, execute it and
// wait for it, and its child tasks, to complete. So, this
// file is the one that deserves most of your attention.
//
// You _may_ want to autogenerate specific tasks (e.g., TLS
// handshake or DNS lookup) using boilerplate's `new-task`
// subcommand. This subcommand will give you a good starting
// point for performing specific submeasurements.
//
// Note: the autogenerated code contains a very basic task
// that does nothing. You should, of course, edit it!
//

import (
	"context"
	"fmt"

	"github.com/ooni/probe-cli/v3/internal/model"
)

// MainTask is the main task.
type MainTask struct {
	// IDGenerator is the TaskIDGenerator to use.
	IDGenerator *TaskIDGenerator

	// Logger is the logger to use.
	Logger model.Logger

	// TODO: add fields.
	//
	// Please, keep in mind that, with multiple tasks you should
	// most like only share fields as read-only here!
}

// NewMainTask creates a new MainTask instance.
//
// Arguments:
//
// - idGenerator allows us to generate unique IDs for each measurement, such
// that we can recognize which observation originates from which submeasurement;
//
// - logger is the logger to use;
//
// TODO: add the required parameters.
func NewMainTask(idGenerator *TaskIDGenerator, logger model.Logger) *MainTask {
	return &MainTask{
		IDGenerator: idGenerator,
		Logger:      logger,
		// TODO: fill fields.
	}
}

// Run implements Task
func (t *MainTask) Run(ctx context.Context, sched TaskScheduler) error {
	t.Logger.Infof("Hello, world")
	return nil
}

// Repr implements Task
func (t *MainTask) Repr() string {
	return fmt.Sprintf("{{ .Name }}Task: %+v", t)
}
