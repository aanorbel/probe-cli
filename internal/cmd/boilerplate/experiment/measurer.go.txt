package {{ .Name }}

//
// Measurer for {{ .Name }}.
//
// The Measurer implements performing a single measurement. Because this
// autogenerated code is optimized to run background tasks, this code's
// main job is to parse inputs and then schedule the "main" task implementing
// the experiment. As such, there is little to change for you here.
//

import (
	"context"
	{{ if ne .InputPolicy "InputOptional" }}
	"errors"
	{{ end }}

	"github.com/ooni/probe-cli/v3/internal/model"
)

// Measurer implements the {{ .Name }} experiment.
type Measurer struct{
	// Config contains the experiment's config.
	Config *Config
}

// NewExperimentMeasurer creates a new model.ExperimentMeasurer for {{ .Name }}.
//
// Code in the internal/registry package binds this function with an ExperimentBuilder
// which is responsible of instantiating a new experiment.
func NewExperimentMeasurer(config *Config) model.ExperimentMeasurer {
	return &Measurer{
		Config: config,
	}
}

// ExperimentName implements model.ExperimentMeasurer.
func (m *Measurer) ExperimentName() string {
	return "{{ .Name }}"
}

// ExperimentVersion implements model.ExperimentMeasurer.
func (m *Measurer) ExperimentVersion() string {
	return "{{ .Version }}"
}

// Run implements model.ExperimentMeasurer.
func (m *Measurer) Run(ctx context.Context, sess model.ExperimentSession,
	measurement *model.Measurement, callbacks model.ExperimentCallbacks) error {
	// Reminder: When this function returns an error, the measurement result
	// WILL NOT be submitted to the OONI backend. You SHOULD only return an error
	// for fundamental errors (e.g., the input is invalid or missing).

	{{ if eq .InputPolicy "InputNone" }}
	// honour {{ .InputPolicy }}
	if measurement.Input != "" {
		sess.Logger().Warn("BUG: {{ .Name }} got input but has {{ .InputPolicy }}!")
		return errors.New("{{ .Name }}: this experiment does not take any input")
	}

	{{ else if eq .InputPolicy "InputOptional" }}
	// honour {{ .InputPolicy }}
	input := measurement.Input
	if input == "" {
		input = m.defaultInput()
	}

	{{ else if eq .InputPolicy "InputOrQueryBackend" }}
	// honour {{ .InputPolicy }}
	input := measurement.Input
	if input == "" {
		sess.Logger().Warn("BUG: {{ .Name }} got no input but has {{ .InputPolicy }}!")
		return errors.New("{{ .Name }}: no input provided")
	}

	{{ else if eq .InputPolicy "InputOrStaticDefault" }}
	// honour {{ .InputPolicy }}
	input := measurement.Input
	if input == "" {
		sess.Logger().Warn("BUG: {{ .Name }} got no input but has {{ .InputPolicy }}!")
		return errors.New("{{ .Name }}: no input provided")
	}

	{{ else if eq .InputPolicy "InputStrictlyRequired" }}
	// honour {{ .InputPolicy }}
	input := measurement.Input
	if input == "" {
		return errors.New("{{ .Name }}: no input provided")
	}

	{{ else }}
	THIS SHOULD NOT HAPPEN! SOMETHING'S WRONG WITH THE AUTO-GENERATOR!
	{{ end }}

	// initialize the experiment's test keys
	tk := NewTestKeys()
	measurement.TestKeys = tk

	// defer the rest of the work to the main task
	idGenerator := NewTaskIDGenerator()
	startTime := measurement.MeasurementStartTimeSaved
	main := NewMainTask(
		idGenerator,
		sess.Logger(),
		tk,
		startTime,
	)
	const parallelism = 10 // TODO: adjust depending on your needs
	ts := NewTaskSchedulerWaiter(sess.Logger(), parallelism)
	ts.Start(ctx, main)
	ts.Wait()

	// return whether there was a fundamental failure, which would prevent
	// the measurement from being submitted to the OONI collector.
	return tk.FundamentalFailure()
}

{{ if eq .InputPolicy "InputOptional" }}
// defaultInput returns the default input value when input is not present
func (m *Measurer) defaultInput() model.MeasurementTarget {
	// TODO: implement
	panic("not implemented")
}
{{ end }}
