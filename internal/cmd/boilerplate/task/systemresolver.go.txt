package {{ .Experiment }}

//
// {{ .StructName }}: {{ .Description }}
//
// This task implements the {{ .Template }} template.
//

import (
	"context"
	"fmt"
	"time"

	"github.com/ooni/probe-cli/v3/internal/netxlite"
	"github.com/ooni/probe-cli/v3/internal/model"
)

// {{ .Description }}
type {{ .StructName }}Task struct {
	// Domain is the domain to resolve.
	Domain string

	// IDGenerator is the TaskIDgenerator to use.
	IDGenerator TaskIDGenerator

	// Logger is the logger to use.
	Logger model.Logger

	// ZeroTime is the measurement's zero time.
	ZeroTime time.Time
}

// New{{ .StructName}}Task creates a new {{ .StructName }}Task instance.
//
// Arguments:
//
// - domain is the domain to resolve;
//
// - idGenerator is the TaskIDGenerator to use;
//
// - logger is the logger to use;
//
// - zeroTime is the zero time of the measurement.
func New{{ .StructName }}Task(domain string, idGenerator TaskIDGenerator,
	logger model.Logger, zeroTime time.Time) *{{ .StructName }}Task {
	return &{{ .StructName }}Task{
		Domain:      domain,
		IDGenerator: idGenerator,
		Logger:      logger,
		ZeroTime:    zeroTime,
	}
}

var _ Task = &{{ .StructName }}Task{}

// Run implements Task
func (t *{{ .StructName }}Task) Run(ctx context.Context, sched TaskScheduler) error {
	const defaultTimeout = 4 * time.Second // TODO: you may want to change this default
	ctx, cancel := context.WithTimeout(ctx, defaultTimeout)
	defer cancel()
	reso := netxlite.NewStdlibResolver(t.Logger)
	addresses, err := reso.LookupHost(ctx, t.Domain)
	if err != nil {
		// TODO: write something into the test keys
		return err
	}
	// TODO: write something into the test keys
	for range addresses {
		// TODO: fan out a number of async child tasks for each IP address
	}
	return nil
}

// Repr implements Task
func (t *{{ .StructName }}Task) Repr() string {
	return fmt.Sprintf("{{ .StructName}}Task: %+v", t)
}
