package telegram

//
// Measurer for telegram.
//
// The Measurer implements performing a single measurement. Because this
// autogenerated code is optimized to run background tasks, this code's
// main job is to parse inputs and then schedule the "main" task implementing
// the experiment. As such, there is little to change for you here.
//

import (
	"context"
	"errors"
	"sync"

	"github.com/ooni/probe-cli/v3/internal/atomicx"
	"github.com/ooni/probe-cli/v3/internal/measurexlite"
	"github.com/ooni/probe-cli/v3/internal/model"
)

// Measurer implements the telegram experiment.
type Measurer struct {
	// Config contains the experiment's config.
	Config *Config
}

// NewExperimentMeasurer creates a new model.ExperimentMeasurer for telegram.
//
// Code in the internal/registry package binds this function with an ExperimentBuilder
// which is responsible of instantiating a new experiment.
func NewExperimentMeasurer(config *Config) model.ExperimentMeasurer {
	return &Measurer{
		Config: config,
	}
}

// ExperimentName implements model.ExperimentMeasurer.
func (m *Measurer) ExperimentName() string {
	return "telegram"
}

// ExperimentVersion implements model.ExperimentMeasurer.
func (m *Measurer) ExperimentVersion() string {
	return "0.3.0"
}

// Run implements model.ExperimentMeasurer.
func (m *Measurer) Run(ctx context.Context, sess model.ExperimentSession,
	measurement *model.Measurement, callbacks model.ExperimentCallbacks) error {
	// Reminder: When this function returns an error, the measurement result
	// WILL NOT be submitted to the OONI backend. You SHOULD only return an error
	// for fundamental errors (e.g., the input is invalid or missing).

	// honour InputNone
	if measurement.Input != "" {
		return errors.New("this experiment does not take any input")
	}

	// initialize the experiment's test keys
	tk := NewTestKeys()
	measurement.TestKeys = tk

	// create variables required to run parallel tasks
	idGenerator := &atomicx.Int64{}
	wg := &sync.WaitGroup{}

	// start background tasks
	// TODO: replace this code with code for running your background tasks

	wg.Add(1)
	go func(logger model.Logger, idx int64) {
		defer wg.Done()
		ol := measurexlite.NewOperationLogger(logger, "telegram#%d", idx)
		tk.SetFundamentalFailure(errors.New("experiment not implemented"))
		ol.Stop(nil)
	}(sess.Logger(), idGenerator.Add(1))

	// wait for background tasks to join
	wg.Wait()

	// return whether there was a fundamental failure, which would prevent
	// the measurement from being submitted to the OONI collector.
	return tk.FundamentalFailure()
}
