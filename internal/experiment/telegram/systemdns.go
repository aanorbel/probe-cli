package telegram

//
// SystemDNSTask
//

import (
	"context"
	"net"
	"sync"
	"time"

	"github.com/ooni/probe-cli/v3/internal/atomicx"
	"github.com/ooni/probe-cli/v3/internal/measurexlite"
	"github.com/ooni/probe-cli/v3/internal/model"
)

//
// Autogenerated section
//
// Suggestion: keep changes in this section minimal to facilitate
// generating the code again next time.
//
// You should insert your own code at the bottom.
//

// Resolves web.telegram.org using the system resolver.
//
// The zero value of this structure IS NOT valid and you MUST initialize
// all the fields marked as MANDATORY before using this structure.
//
// This task implements the system-resolver template.
type SystemDNSTask struct {
	// IDGenerator is the MANDATORY atomic int64 to generate task IDs.
	IDGenerator *atomicx.Int64

	// Logger is the MANDATORY logger to use.
	Logger model.Logger

	// TestKeys is MANDATORY and contains the TestKeys.
	TestKeys *TestKeys

	// ZeroTime is the MANDATORY measurement's zero time.
	ZeroTime time.Time

	// WaitGroup is the MANDATORY wait group this task belongs to.
	WaitGroup *sync.WaitGroup
}

// Start starts this task in a background gorountine.
func (t *SystemDNSTask) Start(ctx context.Context) {
	t.WaitGroup.Add(1)
	index := t.IDGenerator.Add(1)
	go t.run(ctx, index)
}

// run runs this task in the background.
func (t *SystemDNSTask) run(parentCtx context.Context, index int64) {
	// synchronize with wait group
	defer t.WaitGroup.Done()

	// create context with attached a timeout
	const timeout = 4 * time.Second // TODO: change this default
	opCtx, cancel := context.WithTimeout(parentCtx, timeout)
	defer cancel()

	// create trace
	trace := measurexlite.NewTrace(index, t.ZeroTime)

	// start the operation logger
	ol := measurexlite.NewOperationLogger(t.Logger, "SystemDNS#%d", index) // TODO: edit

	// runs the lookup
	reso := trace.NewStdlibResolver(t.Logger)
	addrs, err := reso.LookupHost(opCtx, webTelegramOrg)
	_ = trace.DNSLookupsFromRoundTrip() // TODO: save
	if err != nil {
		ol.Stop(err)
		return
	}

	// emit successful log message
	ol.Stop(nil)

	// (typically) fan out a number of child async tasks to use the IP addrs
	for _, addr := range addrs {
		t.startWebHTTPTask(parentCtx, addr)
		t.startWebHTTPSTask(parentCtx, addr)
	}
}

//
// User section
//
// We suggest adding your custom methods and functions here.
//

// webTelegramOrg is the SNI and host header for telegram web.
const webTelegramOrg = "web.telegram.org"

// startWebHTTPTask starts a WebHTTPTask for this addr.
func (t *SystemDNSTask) startWebHTTPTask(ctx context.Context, addr string) {
	task := &WebHTTPTask{
		Address:     net.JoinHostPort(addr, "80"),
		IDGenerator: t.IDGenerator,
		Logger:      t.Logger,
		TestKeys:    t.TestKeys,
		ZeroTime:    t.ZeroTime,
		WaitGroup:   t.WaitGroup,
		HostHeader:  webTelegramOrg,
		URLPath:     "",
		URLRawQuery: "",
	}
	task.Start(ctx)
}

// startWebHTTPSTask starts a WebHTTPSTask for this addr.
func (t *SystemDNSTask) startWebHTTPSTask(ctx context.Context, addr string) {
	task := &WebHTTPSTask{
		Address:     net.JoinHostPort(addr, "443"),
		IDGenerator: t.IDGenerator,
		Logger:      t.Logger,
		TestKeys:    t.TestKeys,
		ZeroTime:    t.ZeroTime,
		WaitGroup:   t.WaitGroup,
		ALPN:        []string{}, // default is okay
		SNI:         webTelegramOrg,
		HostHeader:  webTelegramOrg,
		URLPath:     "",
		URLRawQuery: "",
	}
	task.Start(ctx)
}
